"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MainStack = void 0;
const cdktf_1 = require("cdktf");
const provider_azurerm_1 = require("@cdktf/provider-azurerm");
const azure_ad_1 = require("./azure/azure_ad");
const application_insight_1 = require("./azure/application_insight");
const mysql_server_1 = require("./azure/mysql_server");
const mysql_db_1 = require("./azure/mysql_db");
const mysql_db_firewall_1 = require("./azure/mysql_db_firewall");
const blob_1 = require("./azure/blob");
const chatbot_1 = require("./azure/chatbot");
const container_registry_1 = require("./azure/container_registry");
const cognitive_service_1 = require("./azure/cognitive_service");
const key_vault_1 = require("./azure/key_vault");
const virtual_network_1 = require("./azure/virtual_network");
const kubernetes_1 = require("./azure/kubernetes");
const path_1 = require("path");
const dotenv_1 = require("dotenv");
const fs = require("fs");
const provider_null_1 = require("@cdktf/provider-null");
const local_1 = require("./.gen/providers/local");
class MainStack extends cdktf_1.TerraformStack {
    constructor(scope, name, props) {
        super(scope, name);
        (0, dotenv_1.config)({ path: (0, path_1.resolve)(__dirname, `./${props.env}.env`) });
        process.env.ENV = props.env;
        process.env.RESOURCE_GROUP_NAME = process.env.RESOURCE_GROUP_NAME + props.env;
        console.log("Resource Group:" + process.env.RESOURCE_GROUP_NAME);
        if (fs.existsSync((0, path_1.resolve)(__dirname, `./secrets.env`))) {
            console.log("Overrides with secrets.env.template");
            const envConfig = (0, dotenv_1.parse)(fs.readFileSync((0, path_1.resolve)(__dirname, `./secrets.env`)));
            for (const k in envConfig) {
                process.env[k] = envConfig[k];
            }
        }
        new provider_azurerm_1.AzurermProvider(this, "Azure provider", {
            features: [{}],
            skipProviderRegistration: false,
        });
        const resourceGroup = new provider_azurerm_1.ResourceGroup(this, "Resource group", {
            name: process.env.RESOURCE_GROUP_NAME,
            location: process.env.LOCATION,
        });
        const azureAdConstruct = new azure_ad_1.AzureAdConstruct(this, "Azure AD");
        const blobStorageConstruct = new blob_1.BlobStorageConstruct(this, "Blob", { resourceGroup });
        const mySQLServerConstruct = new mysql_server_1.MySQLServerConstruct(this, "MySQL server", { resourceGroup });
        new mysql_db_1.MySQLDatabaseConstruct(this, "MySQL database", {
            resourceGroup,
            mysqlServer: mySQLServerConstruct.mysqlServer,
        });
        new mysql_db_firewall_1.MySQLFirewallConstruct(this, "MySQL firewall", {
            resourceGroup,
            mysqlServer: mySQLServerConstruct.mysqlServer,
        });
        const virtualNetworkConstruct = new virtual_network_1.VirtualNetworkConstruct(this, "Virtual Network", {
            resourceGroup,
        });
        const containerRegistrySConstruct = new container_registry_1.ContainerRegistrySConstruct(this, "container registry", {
            resourceGroup,
            azureadConstruct: azureAdConstruct,
        });
        const applicationInsightsConstruct = new application_insight_1.ApplicationInsightsConstruct(this, "Application insights", {
            resourceGroup,
        });
        const cognitiveServiceConstruct = new cognitive_service_1.CognitiveServiceConstruct(this, "Cognitive Service", {
            resourceGroup
        });
        const chatBotConstruct = new chatbot_1.ChatBotConstruct(this, "Chat Bot", {
            resourceGroup
        });
        const keyVaultConstruct = new key_vault_1.KeyVaultConstruct(this, "KeyVault", {
            resourceGroup,
            storageAccount: blobStorageConstruct.storageAccount,
            servicePrincipalObjectId: azureAdConstruct.servicePrincipalObjectId,
            applicationInsightsKey: applicationInsightsConstruct.applicationInsights.instrumentationKey,
            webChatBotSecret: chatBotConstruct.webChatBotSecret,
            cognitiveServiceConstruct
        });
        const kubernetesClusterSConstruct = new kubernetes_1.KubernetesClusterSConstruct(this, "Kubernetes", {
            resourceGroup,
            virtualNetwork: virtualNetworkConstruct,
            azureAdConstruct: azureAdConstruct,
            containerRegistry: containerRegistrySConstruct,
            keyVaultConstruct: keyVaultConstruct,
            mysqlServerConstruct: mySQLServerConstruct,
        });
        const get_k8s_exposed_ip = new provider_null_1.Resource(this, "get kubectl exposed ip", {
            triggers: {},
            dependsOn: [kubernetesClusterSConstruct.kubectl],
        });
        get_k8s_exposed_ip.addOverride("provisioner.local-exec.command", `sleep 30 && kubectl get service -l app=web -o json | jq -r .items[].status.loadBalancer.ingress[].ip > k8sexposedip.txt`);
        const k8sip = new local_1.DataLocalFile(this, "hash_content", {
            filename: "k8sexposedip.txt",
            dependsOn: [get_k8s_exposed_ip],
        });
        const k8sipcontent = k8sip.content;
        new cdktf_1.TerraformOutput(this, "Service Principal App Id", { value: azureAdConstruct.servicePrincipalAppId, sensitive: true });
        new cdktf_1.TerraformOutput(this, "Service Principal Password", { value: azureAdConstruct.servicePrincipalPassword, sensitive: true });
        new cdktf_1.TerraformOutput(this, "Service Principal Tenant Id", { value: azureAdConstruct.servicePrincipalTenantId, sensitive: true });
        new cdktf_1.TerraformOutput(this, "Container Registry Admin Username", { value: containerRegistrySConstruct.containerRegistry.adminUsername, sensitive: true });
        new cdktf_1.TerraformOutput(this, "Container Registry Admin Password", { value: containerRegistrySConstruct.containerRegistry.adminPassword, sensitive: true });
        new cdktf_1.TerraformOutput(this, "Container Registry Identity", { value: containerRegistrySConstruct.containerRegistry.identity, sensitive: true });
        new cdktf_1.TerraformOutput(this, "Key Vault Uri", { value: keyVaultConstruct.keyVault.vaultUri, sensitive: true });
        new cdktf_1.TerraformOutput(this, "K8s LoadBalancer IP", { value: k8sipcontent, sensitive: true });
        new cdktf_1.TerraformOutput(this, "MySQL Server Hostname", { value: mySQLServerConstruct.mysqlServer.fqdn, sensitive: true });
        new cdktf_1.TerraformOutput(this, "MySQL Server Identity", { value: mySQLServerConstruct.mysqlServer.identity, sensitive: true });
        new cdktf_1.TerraformOutput(this, "MySQL Server Username", { value: mySQLServerConstruct.mysqlServer.administratorLogin, sensitive: true });
        new cdktf_1.TerraformOutput(this, "MySQL Server Password", { value: mySQLServerConstruct.mysqlServer.administratorLoginPassword, sensitive: true });
        const get_image_var = new provider_null_1.Resource(this, "get docker image name", {
            triggers: {},
            dependsOn: [kubernetesClusterSConstruct.kubernetesCluster],
        });
        get_image_var.addOverride("provisioner.local-exec.command", `echo -n $(git symbolic-ref --short HEAD) > branch.txt && echo -n $(git rev-parse --short HEAD) > hash.txt`);
        const hash_content = new local_1.DataLocalFile(this, "hash_content_main", {
            filename: "hash.txt",
            dependsOn: [get_image_var],
        });
        const branch_content = new local_1.DataLocalFile(this, "branch_content_main", {
            filename: "branch.txt",
            dependsOn: [get_image_var],
        });
        const dockerimagename = containerRegistrySConstruct.containerRegistry.loginServer + "/" + process.env.PROJECT_NAME + "-" + branch_content.content + ":" + hash_content.content;
        new cdktf_1.TerraformOutput(this, "Docker Image Name", { value: dockerimagename, sensitive: true });
        new cdktf_1.TerraformOutput(this, "resource group name", { value: resourceGroup.name, sensitive: true });
        new cdktf_1.TerraformOutput(this, "kubernetes cluster name", { value: kubernetesClusterSConstruct.kubernetesCluster.name, sensitive: true });
    }
}
exports.MainStack = MainStack;
const app = new cdktf_1.App();
new MainStack(app, "ITP4121-Project", { env: "dev" });
app.synth();
//# sourceMappingURL=data:application/json;base64,