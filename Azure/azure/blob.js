"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlobStorageConstruct = void 0;
const constructs_1 = require("constructs");
const provider_azurerm_1 = require("@cdktf/provider-azurerm");
class BlobStorageConstruct extends constructs_1.Construct {
    constructor(scope, name, props) {
        super(scope, name);
        const { resourceGroup } = props;
        // create storage account
        // https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/storage_account
        this.storageAccount = new provider_azurerm_1.StorageAccount(this, "ITP4121-Project lib storage account", {
            name: process.env.STORAGE_ACCOUNT_NAME + process.env.ENV,
            resourceGroupName: resourceGroup.name,
            location: resourceGroup.location,
            accountTier: process.env.STORAGE_ACCOUNT_TIER,
            accountReplicationType: process.env.STORAGE_ACCOUNT_REPLICATION_TYPE,
        });
        // create container
        // https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/storage_blob
        this.tempContainer = new provider_azurerm_1.StorageContainer(this, "ITP4121-Project lib temp container", {
            name: process.env.STORAGE_CONTAINER_TEMP_NAME,
            containerAccessType: process.env.STORAGE_CONTAINER_ACCESS_TYPE,
            storageAccountName: this.storageAccount.name,
        });
        this.pictureContainer = new provider_azurerm_1.StorageContainer(this, "ITP4121-Project lib picture container", {
            name: process.env.STORAGE_CONTAINER_PERMANENT_NAME,
            containerAccessType: process.env.STORAGE_CONTAINER_ACCESS_TYPE,
            storageAccountName: this.storageAccount.name,
        });
        // create lifecycle policy
        // https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/storage_management_policy
    }
}
exports.BlobStorageConstruct = BlobStorageConstruct;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvYi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImJsb2IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMkNBQXFDO0FBQ3JDLDhEQUF5RjtBQU16RixNQUFhLG9CQUFxQixTQUFRLHNCQUFTO0lBSy9DLFlBQVksS0FBZ0IsRUFBRSxJQUFZLEVBQUUsS0FBZ0M7UUFDeEUsS0FBSyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztRQUVuQixNQUFNLEVBQUMsYUFBYSxFQUFDLEdBQUcsS0FBSyxDQUFDO1FBRTlCLHlCQUF5QjtRQUN6QixrR0FBa0c7UUFDbEcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLGlDQUFjLENBQ3BDLElBQUksRUFDSixxQ0FBcUMsRUFDckM7WUFDSSxJQUFJLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBcUIsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUc7WUFDekQsaUJBQWlCLEVBQUUsYUFBYSxDQUFDLElBQUk7WUFDckMsUUFBUSxFQUFFLGFBQWEsQ0FBQyxRQUFRO1lBQ2hDLFdBQVcsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFxQjtZQUM5QyxzQkFBc0IsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGdDQUFpQztTQUN4RSxDQUNKLENBQUM7UUFFRixtQkFBbUI7UUFDbkIsK0ZBQStGO1FBQy9GLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxtQ0FBZ0IsQ0FDckMsSUFBSSxFQUNKLG9DQUFvQyxFQUNwQztZQUNJLElBQUksRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLDJCQUE0QjtZQUM5QyxtQkFBbUIsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLDZCQUE4QjtZQUMvRCxrQkFBa0IsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUk7U0FDL0MsQ0FDSixDQUFDO1FBRUYsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksbUNBQWdCLENBQ3hDLElBQUksRUFDSix1Q0FBdUMsRUFDdkM7WUFDSSxJQUFJLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQ0FBaUM7WUFDbkQsbUJBQW1CLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyw2QkFBOEI7WUFDL0Qsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJO1NBQy9DLENBQ0osQ0FBQztRQUVGLDBCQUEwQjtRQUMxQiw0R0FBNEc7SUFDaEgsQ0FBQztDQUNKO0FBakRELG9EQWlEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29uc3RydWN0fSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0IHtSZXNvdXJjZUdyb3VwLCBTdG9yYWdlQWNjb3VudCwgU3RvcmFnZUNvbnRhaW5lcix9IGZyb20gXCJAY2RrdGYvcHJvdmlkZXItYXp1cmVybVwiO1xuXG5pbnRlcmZhY2UgQmxvYlN0b3JhZ2VDb25zdHJ1Y3RQcm9wcyB7XG4gICAgcmVzb3VyY2VHcm91cDogUmVzb3VyY2VHcm91cDtcbn1cblxuZXhwb3J0IGNsYXNzIEJsb2JTdG9yYWdlQ29uc3RydWN0IGV4dGVuZHMgQ29uc3RydWN0IHtcbiAgICBwdWJsaWMgcmVhZG9ubHkgc3RvcmFnZUFjY291bnQ6IFN0b3JhZ2VBY2NvdW50O1xuICAgIHB1YmxpYyByZWFkb25seSB0ZW1wQ29udGFpbmVyOiBTdG9yYWdlQ29udGFpbmVyO1xuICAgIHB1YmxpYyByZWFkb25seSBwaWN0dXJlQ29udGFpbmVyOiBTdG9yYWdlQ29udGFpbmVyO1xuXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgbmFtZTogc3RyaW5nLCBwcm9wczogQmxvYlN0b3JhZ2VDb25zdHJ1Y3RQcm9wcykge1xuICAgICAgICBzdXBlcihzY29wZSwgbmFtZSk7XG5cbiAgICAgICAgY29uc3Qge3Jlc291cmNlR3JvdXB9ID0gcHJvcHM7XG5cbiAgICAgICAgLy8gY3JlYXRlIHN0b3JhZ2UgYWNjb3VudFxuICAgICAgICAvLyBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2F6dXJlcm0vbGF0ZXN0L2RvY3MvcmVzb3VyY2VzL3N0b3JhZ2VfYWNjb3VudFxuICAgICAgICB0aGlzLnN0b3JhZ2VBY2NvdW50ID0gbmV3IFN0b3JhZ2VBY2NvdW50KFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIFwiSVRQNDEyMS1Qcm9qZWN0IGxpYiBzdG9yYWdlIGFjY291bnRcIixcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBwcm9jZXNzLmVudi5TVE9SQUdFX0FDQ09VTlRfTkFNRSEgKyBwcm9jZXNzLmVudi5FTlYsXG4gICAgICAgICAgICAgICAgcmVzb3VyY2VHcm91cE5hbWU6IHJlc291cmNlR3JvdXAubmFtZSxcbiAgICAgICAgICAgICAgICBsb2NhdGlvbjogcmVzb3VyY2VHcm91cC5sb2NhdGlvbixcbiAgICAgICAgICAgICAgICBhY2NvdW50VGllcjogcHJvY2Vzcy5lbnYuU1RPUkFHRV9BQ0NPVU5UX1RJRVIhLFxuICAgICAgICAgICAgICAgIGFjY291bnRSZXBsaWNhdGlvblR5cGU6IHByb2Nlc3MuZW52LlNUT1JBR0VfQUNDT1VOVF9SRVBMSUNBVElPTl9UWVBFISxcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgICAvLyBjcmVhdGUgY29udGFpbmVyXG4gICAgICAgIC8vIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvYXp1cmVybS9sYXRlc3QvZG9jcy9yZXNvdXJjZXMvc3RvcmFnZV9ibG9iXG4gICAgICAgIHRoaXMudGVtcENvbnRhaW5lciA9IG5ldyBTdG9yYWdlQ29udGFpbmVyKFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIFwiSVRQNDEyMS1Qcm9qZWN0IGxpYiB0ZW1wIGNvbnRhaW5lclwiLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IHByb2Nlc3MuZW52LlNUT1JBR0VfQ09OVEFJTkVSX1RFTVBfTkFNRSEsXG4gICAgICAgICAgICAgICAgY29udGFpbmVyQWNjZXNzVHlwZTogcHJvY2Vzcy5lbnYuU1RPUkFHRV9DT05UQUlORVJfQUNDRVNTX1RZUEUhLFxuICAgICAgICAgICAgICAgIHN0b3JhZ2VBY2NvdW50TmFtZTogdGhpcy5zdG9yYWdlQWNjb3VudC5uYW1lLFxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMucGljdHVyZUNvbnRhaW5lciA9IG5ldyBTdG9yYWdlQ29udGFpbmVyKFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIFwiSVRQNDEyMS1Qcm9qZWN0IGxpYiBwaWN0dXJlIGNvbnRhaW5lclwiLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IHByb2Nlc3MuZW52LlNUT1JBR0VfQ09OVEFJTkVSX1BFUk1BTkVOVF9OQU1FISxcbiAgICAgICAgICAgICAgICBjb250YWluZXJBY2Nlc3NUeXBlOiBwcm9jZXNzLmVudi5TVE9SQUdFX0NPTlRBSU5FUl9BQ0NFU1NfVFlQRSEsXG4gICAgICAgICAgICAgICAgc3RvcmFnZUFjY291bnROYW1lOiB0aGlzLnN0b3JhZ2VBY2NvdW50Lm5hbWUsXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gY3JlYXRlIGxpZmVjeWNsZSBwb2xpY3lcbiAgICAgICAgLy8gaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9henVyZXJtL2xhdGVzdC9kb2NzL3Jlc291cmNlcy9zdG9yYWdlX21hbmFnZW1lbnRfcG9saWN5XG4gICAgfVxufVxuIl19