"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MySQLDatabaseConstruct = void 0;
const constructs_1 = require("constructs");
const provider_azurerm_1 = require("@cdktf/provider-azurerm");
const provider_null_1 = require("@cdktf/provider-null");
class MySQLDatabaseConstruct extends constructs_1.Construct {
    constructor(scope, name, props) {
        super(scope, name);
        const { resourceGroup, mysqlServer } = props;
        // create MySQL Database
        // https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/mysql_database
        this.mysqlDatabase = new provider_azurerm_1.MysqlDatabase(this, "itp4121project lib MySQL Server Firewall", {
            name: process.env.PROJECT_NAME + process.env.ENV,
            resourceGroupName: resourceGroup.name,
            serverName: mysqlServer.name,
            charset: process.env.MYSQL_DATABASE_CHARSET,
            collation: process.env.MYSQL_DATABASE_COLLATION,
            dependsOn: [mysqlServer],
        });
        const sqluploadtableNullResource = new provider_null_1.Resource(this, "upload table", {
            triggers: {},
        });
        const serverentry = this.mysqlDatabase.serverName + ".mysql.database.azure.com";
        const username = process.env.MYSQL_SERVER_ADMIN_USERNAME + "@" + this.mysqlDatabase.serverName;
        const password = process.env.MYSQL_SERVER_ADMIN_PASSWORD;
        const database = process.env.MYSQL_SCHEMA_NAME;
        sqluploadtableNullResource.addOverride("provisioner.local-exec.command", `sleep 30 && mysql -h ${serverentry} -u ${username} --password=${password} --skip-ssl -e "CREATE DATABASE IF NOT EXISTS ${database}" && mysql -h ${serverentry} -u ${username} --password=${password} --skip-ssl --force ${database} < ../../../pc_donation/mysql.sql`);
    }
}
exports.MySQLDatabaseConstruct = MySQLDatabaseConstruct;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXlzcWxfZGIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJteXNxbF9kYi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwyQ0FBcUM7QUFDckMsOERBQW1GO0FBQ25GLHdEQUE4QztBQU85QyxNQUFhLHNCQUF1QixTQUFRLHNCQUFTO0lBR2pELFlBQVksS0FBZ0IsRUFBRSxJQUFZLEVBQUUsS0FBa0M7UUFDMUUsS0FBSyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNuQixNQUFNLEVBQUMsYUFBYSxFQUFFLFdBQVcsRUFBQyxHQUFHLEtBQUssQ0FBQztRQUUzQyx3QkFBd0I7UUFDeEIsaUdBQWlHO1FBQ2pHLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxnQ0FBYSxDQUNsQyxJQUFJLEVBQ0osMENBQTBDLEVBQzFDO1lBQ0ksSUFBSSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBYSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRztZQUNqRCxpQkFBaUIsRUFBRSxhQUFhLENBQUMsSUFBSTtZQUNyQyxVQUFVLEVBQUUsV0FBVyxDQUFDLElBQUk7WUFDNUIsT0FBTyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsc0JBQXVCO1lBQzVDLFNBQVMsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLHdCQUF5QjtZQUNoRCxTQUFTLEVBQUUsQ0FBQyxXQUFXLENBQUM7U0FDM0IsQ0FDSixDQUFDO1FBQ0YsTUFBTSwwQkFBMEIsR0FBRyxJQUFJLHdCQUFRLENBQUMsSUFBSSxFQUFFLGNBQWMsRUFBRTtZQUNsRSxRQUFRLEVBQUUsRUFDVDtTQUNKLENBQUMsQ0FBQztRQUNILE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxHQUFHLDJCQUEyQixDQUFBO1FBQy9FLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsMkJBQTJCLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFBO1FBQzlGLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsMkJBQTJCLENBQUM7UUFDekQsTUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQztRQUMvQywwQkFBMEIsQ0FBQyxXQUFXLENBQ2xDLGdDQUFnQyxFQUFFLHdCQUF3QixXQUFXLE9BQU8sUUFBUSxlQUFlLFFBQVEsaURBQWlELFFBQVEsaUJBQWlCLFdBQVcsT0FBTyxRQUFRLGVBQWUsUUFBUSx1QkFBdUIsUUFBUSxtQ0FBbUMsQ0FDM1MsQ0FBQztJQUNOLENBQUM7Q0FDSjtBQWpDRCx3REFpQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbnN0cnVjdH0gZnJvbSBcImNvbnN0cnVjdHNcIjtcbmltcG9ydCB7TXlzcWxEYXRhYmFzZSwgTXlzcWxTZXJ2ZXIsIFJlc291cmNlR3JvdXAsfSBmcm9tIFwiQGNka3RmL3Byb3ZpZGVyLWF6dXJlcm1cIjtcbmltcG9ydCB7UmVzb3VyY2V9IGZyb20gXCJAY2RrdGYvcHJvdmlkZXItbnVsbFwiO1xuXG5pbnRlcmZhY2UgTXlTUUxEYXRhYmFzZUNvbnN0cnVjdFByb3BzIHtcbiAgICByZXNvdXJjZUdyb3VwOiBSZXNvdXJjZUdyb3VwO1xuICAgIG15c3FsU2VydmVyOiBNeXNxbFNlcnZlcjtcbn1cblxuZXhwb3J0IGNsYXNzIE15U1FMRGF0YWJhc2VDb25zdHJ1Y3QgZXh0ZW5kcyBDb25zdHJ1Y3Qge1xuICAgIHB1YmxpYyByZWFkb25seSBteXNxbERhdGFiYXNlOiBNeXNxbERhdGFiYXNlO1xuXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgbmFtZTogc3RyaW5nLCBwcm9wczogTXlTUUxEYXRhYmFzZUNvbnN0cnVjdFByb3BzKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBuYW1lKTtcbiAgICAgICAgY29uc3Qge3Jlc291cmNlR3JvdXAsIG15c3FsU2VydmVyfSA9IHByb3BzO1xuXG4gICAgICAgIC8vIGNyZWF0ZSBNeVNRTCBEYXRhYmFzZVxuICAgICAgICAvLyBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2F6dXJlcm0vbGF0ZXN0L2RvY3MvcmVzb3VyY2VzL215c3FsX2RhdGFiYXNlXG4gICAgICAgIHRoaXMubXlzcWxEYXRhYmFzZSA9IG5ldyBNeXNxbERhdGFiYXNlKFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIFwiaXRwNDEyMXByb2plY3QgbGliIE15U1FMIFNlcnZlciBGaXJld2FsbFwiLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IHByb2Nlc3MuZW52LlBST0pFQ1RfTkFNRSEgKyBwcm9jZXNzLmVudi5FTlYsXG4gICAgICAgICAgICAgICAgcmVzb3VyY2VHcm91cE5hbWU6IHJlc291cmNlR3JvdXAubmFtZSxcbiAgICAgICAgICAgICAgICBzZXJ2ZXJOYW1lOiBteXNxbFNlcnZlci5uYW1lLFxuICAgICAgICAgICAgICAgIGNoYXJzZXQ6IHByb2Nlc3MuZW52Lk1ZU1FMX0RBVEFCQVNFX0NIQVJTRVQhLFxuICAgICAgICAgICAgICAgIGNvbGxhdGlvbjogcHJvY2Vzcy5lbnYuTVlTUUxfREFUQUJBU0VfQ09MTEFUSU9OISxcbiAgICAgICAgICAgICAgICBkZXBlbmRzT246IFtteXNxbFNlcnZlcl0sXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IHNxbHVwbG9hZHRhYmxlTnVsbFJlc291cmNlID0gbmV3IFJlc291cmNlKHRoaXMsIFwidXBsb2FkIHRhYmxlXCIsIHtcbiAgICAgICAgICAgIHRyaWdnZXJzOiB7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3Qgc2VydmVyZW50cnkgPSB0aGlzLm15c3FsRGF0YWJhc2Uuc2VydmVyTmFtZSArIFwiLm15c3FsLmRhdGFiYXNlLmF6dXJlLmNvbVwiXG4gICAgICAgIGNvbnN0IHVzZXJuYW1lID0gcHJvY2Vzcy5lbnYuTVlTUUxfU0VSVkVSX0FETUlOX1VTRVJOQU1FICsgXCJAXCIgKyB0aGlzLm15c3FsRGF0YWJhc2Uuc2VydmVyTmFtZVxuICAgICAgICBjb25zdCBwYXNzd29yZCA9IHByb2Nlc3MuZW52Lk1ZU1FMX1NFUlZFUl9BRE1JTl9QQVNTV09SRDtcbiAgICAgICAgY29uc3QgZGF0YWJhc2UgPSBwcm9jZXNzLmVudi5NWVNRTF9TQ0hFTUFfTkFNRTtcbiAgICAgICAgc3FsdXBsb2FkdGFibGVOdWxsUmVzb3VyY2UuYWRkT3ZlcnJpZGUoXG4gICAgICAgICAgICBcInByb3Zpc2lvbmVyLmxvY2FsLWV4ZWMuY29tbWFuZFwiLCBgc2xlZXAgMzAgJiYgbXlzcWwgLWggJHtzZXJ2ZXJlbnRyeX0gLXUgJHt1c2VybmFtZX0gLS1wYXNzd29yZD0ke3Bhc3N3b3JkfSAtLXNraXAtc3NsIC1lIFwiQ1JFQVRFIERBVEFCQVNFIElGIE5PVCBFWElTVFMgJHtkYXRhYmFzZX1cIiAmJiBteXNxbCAtaCAke3NlcnZlcmVudHJ5fSAtdSAke3VzZXJuYW1lfSAtLXBhc3N3b3JkPSR7cGFzc3dvcmR9IC0tc2tpcC1zc2wgLS1mb3JjZSAke2RhdGFiYXNlfSA8IC4uLy4uLy4uL3BjX2RvbmF0aW9uL215c3FsLnNxbGBcbiAgICAgICAgKTtcbiAgICB9XG59XG4iXX0=