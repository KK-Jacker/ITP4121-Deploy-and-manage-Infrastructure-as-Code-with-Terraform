"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MySQLServerConstruct = void 0;
const constructs_1 = require("constructs");
const provider_azurerm_1 = require("@cdktf/provider-azurerm");
class MySQLServerConstruct extends constructs_1.Construct {
    constructor(scope, name, props) {
        super(scope, name);
        const { resourceGroup } = props;
        // create MySQL Server
        // https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/mysql_server
        this.mysqlServer = new provider_azurerm_1.MysqlServer(this, "iShare lib MySQL Server", {
            name: process.env.PROJECT_NAME + process.env.ENV,
            version: process.env.MYSQL_SERVER_VERSION,
            skuName: process.env.MYSQL_SERVER_SKU_NAME,
            storageMb: process.env.MYSQL_SERVER_SKU_STORAGE_SIZE,
            resourceGroupName: resourceGroup.name,
            location: resourceGroup.location,
            identity: [
                {
                    type: process.env.MYSQL_SERVER_IDENTITY_TYPE,
                },
            ],
            administratorLogin: process.env.MYSQL_SERVER_ADMIN_USERNAME,
            administratorLoginPassword: process.env.MYSQL_SERVER_ADMIN_PASSWORD,
            publicNetworkAccessEnabled: true,
            sslEnforcementEnabled: false,
            geoRedundantBackupEnabled: true,
            dependsOn: [resourceGroup],
            tags: JSON.parse(process.env.AZURETAG),
        });
    }
}
exports.MySQLServerConstruct = MySQLServerConstruct;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXlzcWxfc2VydmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibXlzcWxfc2VydmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDJDQUFxQztBQUNyQyw4REFBbUU7QUFNbkUsTUFBYSxvQkFBcUIsU0FBUSxzQkFBUztJQUcvQyxZQUFZLEtBQWdCLEVBQUUsSUFBWSxFQUFFLEtBQWdDO1FBQ3hFLEtBQUssQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFbkIsTUFBTSxFQUFDLGFBQWEsRUFBQyxHQUFHLEtBQUssQ0FBQztRQUU5QixzQkFBc0I7UUFDdEIsK0ZBQStGO1FBQy9GLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSw4QkFBVyxDQUFDLElBQUksRUFBRSx5QkFBeUIsRUFBRTtZQUNoRSxJQUFJLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFhLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHO1lBQ2pELE9BQU8sRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFxQjtZQUMxQyxPQUFPLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBc0I7WUFDM0MsU0FBUyxFQUFvQixPQUFPLENBQUMsR0FBRyxDQUFDLDZCQUErQjtZQUN4RSxpQkFBaUIsRUFBRSxhQUFhLENBQUMsSUFBSTtZQUNyQyxRQUFRLEVBQUUsYUFBYSxDQUFDLFFBQVE7WUFDaEMsUUFBUSxFQUFFO2dCQUNOO29CQUNJLElBQUksRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLDBCQUEyQjtpQkFDaEQ7YUFDSjtZQUNELGtCQUFrQixFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsMkJBQTRCO1lBQzVELDBCQUEwQixFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsMkJBQTRCO1lBQ3BFLDBCQUEwQixFQUFFLElBQUk7WUFDaEMscUJBQXFCLEVBQUUsS0FBSztZQUM1Qix5QkFBeUIsRUFBRSxJQUFJO1lBQy9CLFNBQVMsRUFBRSxDQUFDLGFBQWEsQ0FBQztZQUMxQixJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVMsQ0FBQztTQUMxQyxDQUFDLENBQUM7SUFDUCxDQUFDO0NBQ0o7QUEvQkQsb0RBK0JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb25zdHJ1Y3R9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XG5pbXBvcnQge015c3FsU2VydmVyLCBSZXNvdXJjZUdyb3VwfSBmcm9tIFwiQGNka3RmL3Byb3ZpZGVyLWF6dXJlcm1cIjtcblxuaW50ZXJmYWNlIE15U1FMU2VydmVyQ29uc3RydWN0UHJvcHMge1xuICAgIHJlc291cmNlR3JvdXA6IFJlc291cmNlR3JvdXA7XG59XG5cbmV4cG9ydCBjbGFzcyBNeVNRTFNlcnZlckNvbnN0cnVjdCBleHRlbmRzIENvbnN0cnVjdCB7XG4gICAgcHVibGljIHJlYWRvbmx5IG15c3FsU2VydmVyOiBNeXNxbFNlcnZlcjtcblxuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIG5hbWU6IHN0cmluZywgcHJvcHM6IE15U1FMU2VydmVyQ29uc3RydWN0UHJvcHMpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIG5hbWUpO1xuXG4gICAgICAgIGNvbnN0IHtyZXNvdXJjZUdyb3VwfSA9IHByb3BzO1xuXG4gICAgICAgIC8vIGNyZWF0ZSBNeVNRTCBTZXJ2ZXJcbiAgICAgICAgLy8gaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9henVyZXJtL2xhdGVzdC9kb2NzL3Jlc291cmNlcy9teXNxbF9zZXJ2ZXJcbiAgICAgICAgdGhpcy5teXNxbFNlcnZlciA9IG5ldyBNeXNxbFNlcnZlcih0aGlzLCBcImlTaGFyZSBsaWIgTXlTUUwgU2VydmVyXCIsIHtcbiAgICAgICAgICAgIG5hbWU6IHByb2Nlc3MuZW52LlBST0pFQ1RfTkFNRSEgKyBwcm9jZXNzLmVudi5FTlYsXG4gICAgICAgICAgICB2ZXJzaW9uOiBwcm9jZXNzLmVudi5NWVNRTF9TRVJWRVJfVkVSU0lPTiEsXG4gICAgICAgICAgICBza3VOYW1lOiBwcm9jZXNzLmVudi5NWVNRTF9TRVJWRVJfU0tVX05BTUUhLFxuICAgICAgICAgICAgc3RvcmFnZU1iOiA8bnVtYmVyPig8dW5rbm93bj5wcm9jZXNzLmVudi5NWVNRTF9TRVJWRVJfU0tVX1NUT1JBR0VfU0laRSEpLFxuICAgICAgICAgICAgcmVzb3VyY2VHcm91cE5hbWU6IHJlc291cmNlR3JvdXAubmFtZSxcbiAgICAgICAgICAgIGxvY2F0aW9uOiByZXNvdXJjZUdyb3VwLmxvY2F0aW9uLFxuICAgICAgICAgICAgaWRlbnRpdHk6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IHByb2Nlc3MuZW52Lk1ZU1FMX1NFUlZFUl9JREVOVElUWV9UWVBFISxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGFkbWluaXN0cmF0b3JMb2dpbjogcHJvY2Vzcy5lbnYuTVlTUUxfU0VSVkVSX0FETUlOX1VTRVJOQU1FISxcbiAgICAgICAgICAgIGFkbWluaXN0cmF0b3JMb2dpblBhc3N3b3JkOiBwcm9jZXNzLmVudi5NWVNRTF9TRVJWRVJfQURNSU5fUEFTU1dPUkQhLFxuICAgICAgICAgICAgcHVibGljTmV0d29ya0FjY2Vzc0VuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICBzc2xFbmZvcmNlbWVudEVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICAgICAgZ2VvUmVkdW5kYW50QmFja3VwRW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgIGRlcGVuZHNPbjogW3Jlc291cmNlR3JvdXBdLFxuICAgICAgICAgICAgdGFnczogSlNPTi5wYXJzZShwcm9jZXNzLmVudi5BWlVSRVRBRyEpLFxuICAgICAgICB9KTtcbiAgICB9XG59XG4iXX0=