"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AzureAdConstruct = void 0;
const constructs_1 = require("constructs");
const application_1 = require("../.gen/providers/azuread/application");
const service_principal_1 = require("../.gen/providers/azuread/service-principal");
const service_principal_password_1 = require("../.gen/providers/azuread/service-principal-password");
const provider_azurerm_1 = require("@cdktf/provider-azurerm");
class AzureAdConstruct extends constructs_1.Construct {
    constructor(scope, name) {
        super(scope, name);
        const dataAzureRmClientConfig = new provider_azurerm_1.DataAzurermClientConfig(this, "Client Config");
        const application = new application_1.Application(this, "ITP4121-Project Application", {
            displayName: process.env.PROJECT_NAME + process.env.ENV,
            owners: [dataAzureRmClientConfig.objectId],
        });
        const servicePrincipal = new service_principal_1.ServicePrincipal(this, "ITP4121-Project Service Principal", {
            applicationId: application.applicationId,
        });
        const principalPassword = new service_principal_password_1.ServicePrincipalPassword(this, "Service Principal Password", {
            servicePrincipalId: servicePrincipal.objectId
        });
        this.servicePrincipalAppId = application.applicationId;
        this.servicePrincipalPassword = principalPassword.value;
        this.servicePrincipalTenantId = dataAzureRmClientConfig.tenantId;
        this.servicePrincipalObjectId = servicePrincipal.objectId;
    }
}
exports.AzureAdConstruct = AzureAdConstruct;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXp1cmVfYWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhenVyZV9hZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwyQ0FBcUM7QUFDckMsdUVBQWtFO0FBRWxFLG1GQUE2RTtBQUM3RSxxR0FBOEY7QUFHOUYsOERBQWlFO0FBR2pFLE1BQWEsZ0JBQWlCLFNBQVEsc0JBQVM7SUFNM0MsWUFBWSxLQUFnQixFQUFFLElBQVk7UUFDdEMsS0FBSyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNuQixNQUFNLHVCQUF1QixHQUFHLElBQUksMENBQXVCLENBQUMsSUFBSSxFQUFFLGVBQWUsQ0FBQyxDQUFDO1FBRW5GLE1BQU0sV0FBVyxHQUFHLElBQUkseUJBQVcsQ0FBQyxJQUFJLEVBQUUsNkJBQTZCLEVBQUU7WUFDckUsV0FBVyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBYSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRztZQUN4RCxNQUFNLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxRQUFRLENBQUM7U0FDN0MsQ0FBQyxDQUFDO1FBRUgsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLG9DQUFnQixDQUFDLElBQUksRUFBRSxtQ0FBbUMsRUFBRTtZQUNyRixhQUFhLEVBQUUsV0FBVyxDQUFDLGFBQWE7U0FDM0MsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLHFEQUF3QixDQUFDLElBQUksRUFBRSw0QkFBNEIsRUFBRTtZQUN2RixrQkFBa0IsRUFBRSxnQkFBZ0IsQ0FBQyxRQUFRO1NBQ2hELENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxxQkFBcUIsR0FBRyxXQUFXLENBQUMsYUFBYSxDQUFDO1FBQ3ZELElBQUksQ0FBQyx3QkFBd0IsR0FBRyxpQkFBaUIsQ0FBQyxLQUFLLENBQUM7UUFDeEQsSUFBSSxDQUFDLHdCQUF3QixHQUFHLHVCQUF1QixDQUFDLFFBQVEsQ0FBQztRQUNqRSxJQUFJLENBQUMsd0JBQXdCLEdBQUcsZ0JBQWdCLENBQUMsUUFBUSxDQUFDO0lBQzlELENBQUM7Q0FDSjtBQTNCRCw0Q0EyQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbnN0cnVjdH0gZnJvbSBcImNvbnN0cnVjdHNcIjtcbmltcG9ydCB7QXBwbGljYXRpb259IGZyb20gXCIuLi8uZ2VuL3Byb3ZpZGVycy9henVyZWFkL2FwcGxpY2F0aW9uXCI7XG5cbmltcG9ydCB7U2VydmljZVByaW5jaXBhbH0gZnJvbSBcIi4uLy5nZW4vcHJvdmlkZXJzL2F6dXJlYWQvc2VydmljZS1wcmluY2lwYWxcIjtcbmltcG9ydCB7U2VydmljZVByaW5jaXBhbFBhc3N3b3JkfSBmcm9tIFwiLi4vLmdlbi9wcm92aWRlcnMvYXp1cmVhZC9zZXJ2aWNlLXByaW5jaXBhbC1wYXNzd29yZFwiO1xuXG5cbmltcG9ydCB7RGF0YUF6dXJlcm1DbGllbnRDb25maWcsfSBmcm9tIFwiQGNka3RmL3Byb3ZpZGVyLWF6dXJlcm1cIjtcblxuXG5leHBvcnQgY2xhc3MgQXp1cmVBZENvbnN0cnVjdCBleHRlbmRzIENvbnN0cnVjdCB7XG4gICAgcHVibGljIHJlYWRvbmx5IHNlcnZpY2VQcmluY2lwYWxPYmplY3RJZDogc3RyaW5nO1xuICAgIHB1YmxpYyByZWFkb25seSBzZXJ2aWNlUHJpbmNpcGFsQXBwSWQ6IHN0cmluZztcbiAgICBwdWJsaWMgcmVhZG9ubHkgc2VydmljZVByaW5jaXBhbFRlbmFudElkOiBzdHJpbmc7XG4gICAgcHVibGljIHJlYWRvbmx5IHNlcnZpY2VQcmluY2lwYWxQYXNzd29yZDogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgbmFtZTogc3RyaW5nLCkge1xuICAgICAgICBzdXBlcihzY29wZSwgbmFtZSk7XG4gICAgICAgIGNvbnN0IGRhdGFBenVyZVJtQ2xpZW50Q29uZmlnID0gbmV3IERhdGFBenVyZXJtQ2xpZW50Q29uZmlnKHRoaXMsIFwiQ2xpZW50IENvbmZpZ1wiKTtcblxuICAgICAgICBjb25zdCBhcHBsaWNhdGlvbiA9IG5ldyBBcHBsaWNhdGlvbih0aGlzLCBcIklUUDQxMjEtUHJvamVjdCBBcHBsaWNhdGlvblwiLCB7XG4gICAgICAgICAgICBkaXNwbGF5TmFtZTogcHJvY2Vzcy5lbnYuUFJPSkVDVF9OQU1FISArIHByb2Nlc3MuZW52LkVOVixcbiAgICAgICAgICAgIG93bmVyczogW2RhdGFBenVyZVJtQ2xpZW50Q29uZmlnLm9iamVjdElkXSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3Qgc2VydmljZVByaW5jaXBhbCA9IG5ldyBTZXJ2aWNlUHJpbmNpcGFsKHRoaXMsIFwiSVRQNDEyMS1Qcm9qZWN0IFNlcnZpY2UgUHJpbmNpcGFsXCIsIHtcbiAgICAgICAgICAgIGFwcGxpY2F0aW9uSWQ6IGFwcGxpY2F0aW9uLmFwcGxpY2F0aW9uSWQsXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBwcmluY2lwYWxQYXNzd29yZCA9IG5ldyBTZXJ2aWNlUHJpbmNpcGFsUGFzc3dvcmQodGhpcywgXCJTZXJ2aWNlIFByaW5jaXBhbCBQYXNzd29yZFwiLCB7XG4gICAgICAgICAgICBzZXJ2aWNlUHJpbmNpcGFsSWQ6IHNlcnZpY2VQcmluY2lwYWwub2JqZWN0SWRcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5zZXJ2aWNlUHJpbmNpcGFsQXBwSWQgPSBhcHBsaWNhdGlvbi5hcHBsaWNhdGlvbklkO1xuICAgICAgICB0aGlzLnNlcnZpY2VQcmluY2lwYWxQYXNzd29yZCA9IHByaW5jaXBhbFBhc3N3b3JkLnZhbHVlO1xuICAgICAgICB0aGlzLnNlcnZpY2VQcmluY2lwYWxUZW5hbnRJZCA9IGRhdGFBenVyZVJtQ2xpZW50Q29uZmlnLnRlbmFudElkO1xuICAgICAgICB0aGlzLnNlcnZpY2VQcmluY2lwYWxPYmplY3RJZCA9IHNlcnZpY2VQcmluY2lwYWwub2JqZWN0SWQ7XG4gICAgfVxufSJdfQ==