"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContainerRegistrySConstruct = void 0;
const constructs_1 = require("constructs");
const provider_azurerm_1 = require("@cdktf/provider-azurerm");
const provider_null_1 = require("@cdktf/provider-null");
class ContainerRegistrySConstruct extends constructs_1.Construct {
    constructor(scope, name, props) {
        super(scope, name);
        const { resourceGroup } = props;
        // create container registry
        this.containerRegistry = new provider_azurerm_1.ContainerRegistry(this, "ITP4121-Project kubernetes container registry", {
            name: process.env.PROJECT_NAME + process.env.ENV,
            sku: process.env.CONTAINER_REGISTRY_SKU,
            resourceGroupName: resourceGroup.name,
            location: resourceGroup.location,
            adminEnabled: true,
            dependsOn: [resourceGroup],
            tags: JSON.parse(process.env.AZURETAG),
        });
        this.builddocker = new provider_null_1.Resource(this, "build docker image", {
            triggers: {},
            dependsOn: [this.containerRegistry],
        });
        this.roleAssignment = new provider_null_1.Resource(this, "ITP4121-Project kubernetes container registry role assignment", {
            triggers: {},
            dependsOn: [this.containerRegistry],
        });
        const acrscope = this.containerRegistry.id;
        const serverentry = this.containerRegistry.loginServer;
        const username = this.containerRegistry.adminUsername;
        const password = this.containerRegistry.adminPassword;
        const imgname = process.env.PROJECT_NAME;
        const VAULT_URL = "https://" + process.env.PROJECT_NAME + process.env.ENV + ".vault.azure.net/";
        const AZURE_CLIENT_ID = props.azureadConstruct.servicePrincipalAppId;
        const AZURE_TENANT_ID = props.azureadConstruct.servicePrincipalTenantId;
        const AZURE_CLIENT_SECRET = props.azureadConstruct.servicePrincipalPassword;
        this.roleAssignment.addOverride("provisioner.local-exec.command", `az role assignment create --assignee ${AZURE_CLIENT_ID}  --scope ${acrscope} --role acrpull`);
        this.builddocker.addOverride("provisioner.local-exec.command", `sleep 30 && docker login ${serverentry} -u ${username} -p ${password} && \ 
            branch=$(git symbolic-ref --short HEAD) && hash=$(git rev-parse --short HEAD) && chmod -R +rxw ../../../pc_donation/dev && \
            docker build -t ${serverentry}/${imgname}-$branch:$hash --build-arg VAULT_URL=${VAULT_URL} --build-arg AZURE_CLIENT_ID=${AZURE_CLIENT_ID} --build-arg AZURE_TENANT_ID=${AZURE_TENANT_ID} --build-arg AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET} ../../../pc_donation && \
            docker push ${serverentry}/${imgname}-$branch:$hash`);
    }
}
exports.ContainerRegistrySConstruct = ContainerRegistrySConstruct;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGFpbmVyX3JlZ2lzdHJ5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29udGFpbmVyX3JlZ2lzdHJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDJDQUFxQztBQUNyQyw4REFBeUU7QUFDekUsd0RBQThDO0FBTzlDLE1BQWEsMkJBQTRCLFNBQVEsc0JBQVM7SUFJdEQsWUFDSSxLQUFnQixFQUNoQixJQUFZLEVBQ1osS0FBc0M7UUFFdEMsS0FBSyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztRQUVuQixNQUFNLEVBQUMsYUFBYSxFQUFDLEdBQUcsS0FBSyxDQUFDO1FBRTlCLDRCQUE0QjtRQUM1QixJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxvQ0FBaUIsQ0FDMUMsSUFBSSxFQUNKLCtDQUErQyxFQUMvQztZQUNJLElBQUksRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQWEsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUc7WUFDakQsR0FBRyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsc0JBQXVCO1lBQ3hDLGlCQUFpQixFQUFFLGFBQWEsQ0FBQyxJQUFJO1lBQ3JDLFFBQVEsRUFBRSxhQUFhLENBQUMsUUFBUTtZQUNoQyxZQUFZLEVBQUUsSUFBSTtZQUNsQixTQUFTLEVBQUUsQ0FBQyxhQUFhLENBQUM7WUFDMUIsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFTLENBQUM7U0FDMUMsQ0FDSixDQUFDO1FBRUYsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLHdCQUFRLENBQzNCLElBQUksRUFDSixvQkFBb0IsRUFDcEI7WUFDSSxRQUFRLEVBQUUsRUFBRTtZQUNaLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztTQUN0QyxDQUNKLENBQUM7UUFFRixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksd0JBQVEsQ0FDOUIsSUFBSSxFQUNKLCtEQUErRCxFQUMvRDtZQUNJLFFBQVEsRUFBRSxFQUFFO1lBQ1osU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDO1NBQ3RDLENBQ0osQ0FBQztRQUtGLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUM7UUFDM0MsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQztRQUN2RCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsYUFBYSxDQUFDO1FBQ3RELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLENBQUM7UUFDdEQsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUM7UUFDekMsTUFBTSxTQUFTLEdBQUcsVUFBVSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBYSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLG1CQUFtQixDQUFBO1FBQ2hHLE1BQU0sZUFBZSxHQUFHLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxxQkFBcUIsQ0FBQztRQUNyRSxNQUFNLGVBQWUsR0FBRyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsd0JBQXdCLENBQUM7UUFDeEUsTUFBTSxtQkFBbUIsR0FBRyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsd0JBQXdCLENBQUM7UUFFNUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQzNCLGdDQUFnQyxFQUFFLHdDQUF3QyxlQUFlLGFBQWEsUUFBUSxpQkFBaUIsQ0FDbEksQ0FBQztRQUNGLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUN4QixnQ0FBZ0MsRUFBRSw0QkFBNEIsV0FBVyxPQUFPLFFBQVEsT0FBTyxRQUFROzs4QkFFckYsV0FBVyxJQUFJLE9BQU8sd0NBQXdDLFNBQVMsZ0NBQWdDLGVBQWUsZ0NBQWdDLGVBQWUsb0NBQW9DLG1CQUFtQjswQkFDaE8sV0FBVyxJQUFJLE9BQU8sZ0JBQWdCLENBQ3ZELENBQUM7SUFDTixDQUFDO0NBQ0o7QUFyRUQsa0VBcUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb25zdHJ1Y3R9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XG5pbXBvcnQge0NvbnRhaW5lclJlZ2lzdHJ5LCBSZXNvdXJjZUdyb3VwfSBmcm9tIFwiQGNka3RmL3Byb3ZpZGVyLWF6dXJlcm1cIjtcbmltcG9ydCB7UmVzb3VyY2V9IGZyb20gXCJAY2RrdGYvcHJvdmlkZXItbnVsbFwiO1xuaW1wb3J0IHtBenVyZUFkQ29uc3RydWN0fSBmcm9tIFwiLi9henVyZV9hZFwiO1xuaW50ZXJmYWNlIENvbnRhaW5lclJlZ2lzdHJ5Q29uc3RydWN0UHJvcHMge1xuICAgIHJlc291cmNlR3JvdXA6IFJlc291cmNlR3JvdXA7XG4gICAgYXp1cmVhZENvbnN0cnVjdDogQXp1cmVBZENvbnN0cnVjdDtcbn1cblxuZXhwb3J0IGNsYXNzIENvbnRhaW5lclJlZ2lzdHJ5U0NvbnN0cnVjdCBleHRlbmRzIENvbnN0cnVjdCB7XG4gICAgcHVibGljIHJlYWRvbmx5IGNvbnRhaW5lclJlZ2lzdHJ5OiBDb250YWluZXJSZWdpc3RyeTtcbiAgICBwdWJsaWMgcmVhZG9ubHkgcm9sZUFzc2lnbm1lbnQ6IFJlc291cmNlO1xuICAgIHB1YmxpYyByZWFkb25seSBidWlsZGRvY2tlcjogUmVzb3VyY2U7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHNjb3BlOiBDb25zdHJ1Y3QsXG4gICAgICAgIG5hbWU6IHN0cmluZyxcbiAgICAgICAgcHJvcHM6IENvbnRhaW5lclJlZ2lzdHJ5Q29uc3RydWN0UHJvcHNcbiAgICApIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIG5hbWUpO1xuXG4gICAgICAgIGNvbnN0IHtyZXNvdXJjZUdyb3VwfSA9IHByb3BzO1xuXG4gICAgICAgIC8vIGNyZWF0ZSBjb250YWluZXIgcmVnaXN0cnlcbiAgICAgICAgdGhpcy5jb250YWluZXJSZWdpc3RyeSA9IG5ldyBDb250YWluZXJSZWdpc3RyeShcbiAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICBcIklUUDQxMjEtUHJvamVjdCBrdWJlcm5ldGVzIGNvbnRhaW5lciByZWdpc3RyeVwiLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IHByb2Nlc3MuZW52LlBST0pFQ1RfTkFNRSEgKyBwcm9jZXNzLmVudi5FTlYsXG4gICAgICAgICAgICAgICAgc2t1OiBwcm9jZXNzLmVudi5DT05UQUlORVJfUkVHSVNUUllfU0tVISxcbiAgICAgICAgICAgICAgICByZXNvdXJjZUdyb3VwTmFtZTogcmVzb3VyY2VHcm91cC5uYW1lLFxuICAgICAgICAgICAgICAgIGxvY2F0aW9uOiByZXNvdXJjZUdyb3VwLmxvY2F0aW9uLFxuICAgICAgICAgICAgICAgIGFkbWluRW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBkZXBlbmRzT246IFtyZXNvdXJjZUdyb3VwXSxcbiAgICAgICAgICAgICAgICB0YWdzOiBKU09OLnBhcnNlKHByb2Nlc3MuZW52LkFaVVJFVEFHISksXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5idWlsZGRvY2tlciA9IG5ldyBSZXNvdXJjZShcbiAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICBcImJ1aWxkIGRvY2tlciBpbWFnZVwiLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRyaWdnZXJzOiB7fSxcbiAgICAgICAgICAgICAgICBkZXBlbmRzT246IFt0aGlzLmNvbnRhaW5lclJlZ2lzdHJ5XSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLnJvbGVBc3NpZ25tZW50ID0gbmV3IFJlc291cmNlKFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIFwiSVRQNDEyMS1Qcm9qZWN0IGt1YmVybmV0ZXMgY29udGFpbmVyIHJlZ2lzdHJ5IHJvbGUgYXNzaWdubWVudFwiLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRyaWdnZXJzOiB7fSxcbiAgICAgICAgICAgICAgICBkZXBlbmRzT246IFt0aGlzLmNvbnRhaW5lclJlZ2lzdHJ5XSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuXG5cblxuICAgICAgICBjb25zdCBhY3JzY29wZSA9IHRoaXMuY29udGFpbmVyUmVnaXN0cnkuaWQ7XG4gICAgICAgIGNvbnN0IHNlcnZlcmVudHJ5ID0gdGhpcy5jb250YWluZXJSZWdpc3RyeS5sb2dpblNlcnZlcjtcbiAgICAgICAgY29uc3QgdXNlcm5hbWUgPSB0aGlzLmNvbnRhaW5lclJlZ2lzdHJ5LmFkbWluVXNlcm5hbWU7XG4gICAgICAgIGNvbnN0IHBhc3N3b3JkID0gdGhpcy5jb250YWluZXJSZWdpc3RyeS5hZG1pblBhc3N3b3JkO1xuICAgICAgICBjb25zdCBpbWduYW1lID0gcHJvY2Vzcy5lbnYuUFJPSkVDVF9OQU1FO1xuICAgICAgICBjb25zdCBWQVVMVF9VUkwgPSBcImh0dHBzOi8vXCIgKyBwcm9jZXNzLmVudi5QUk9KRUNUX05BTUUhICsgcHJvY2Vzcy5lbnYuRU5WICsgXCIudmF1bHQuYXp1cmUubmV0L1wiXG4gICAgICAgIGNvbnN0IEFaVVJFX0NMSUVOVF9JRCA9IHByb3BzLmF6dXJlYWRDb25zdHJ1Y3Quc2VydmljZVByaW5jaXBhbEFwcElkO1xuICAgICAgICBjb25zdCBBWlVSRV9URU5BTlRfSUQgPSBwcm9wcy5henVyZWFkQ29uc3RydWN0LnNlcnZpY2VQcmluY2lwYWxUZW5hbnRJZDtcbiAgICAgICAgY29uc3QgQVpVUkVfQ0xJRU5UX1NFQ1JFVCA9IHByb3BzLmF6dXJlYWRDb25zdHJ1Y3Quc2VydmljZVByaW5jaXBhbFBhc3N3b3JkO1xuXG4gICAgICAgIHRoaXMucm9sZUFzc2lnbm1lbnQuYWRkT3ZlcnJpZGUoXG4gICAgICAgICAgICBcInByb3Zpc2lvbmVyLmxvY2FsLWV4ZWMuY29tbWFuZFwiLCBgYXogcm9sZSBhc3NpZ25tZW50IGNyZWF0ZSAtLWFzc2lnbmVlICR7QVpVUkVfQ0xJRU5UX0lEfSAgLS1zY29wZSAke2FjcnNjb3BlfSAtLXJvbGUgYWNycHVsbGBcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5idWlsZGRvY2tlci5hZGRPdmVycmlkZShcbiAgICAgICAgICAgIFwicHJvdmlzaW9uZXIubG9jYWwtZXhlYy5jb21tYW5kXCIsIGBzbGVlcCAzMCAmJiBkb2NrZXIgbG9naW4gJHtzZXJ2ZXJlbnRyeX0gLXUgJHt1c2VybmFtZX0gLXAgJHtwYXNzd29yZH0gJiYgXFwgXG4gICAgICAgICAgICBicmFuY2g9JChnaXQgc3ltYm9saWMtcmVmIC0tc2hvcnQgSEVBRCkgJiYgaGFzaD0kKGdpdCByZXYtcGFyc2UgLS1zaG9ydCBIRUFEKSAmJiBjaG1vZCAtUiArcnh3IC4uLy4uLy4uL3BjX2RvbmF0aW9uL2RldiAmJiBcXFxuICAgICAgICAgICAgZG9ja2VyIGJ1aWxkIC10ICR7c2VydmVyZW50cnl9LyR7aW1nbmFtZX0tJGJyYW5jaDokaGFzaCAtLWJ1aWxkLWFyZyBWQVVMVF9VUkw9JHtWQVVMVF9VUkx9IC0tYnVpbGQtYXJnIEFaVVJFX0NMSUVOVF9JRD0ke0FaVVJFX0NMSUVOVF9JRH0gLS1idWlsZC1hcmcgQVpVUkVfVEVOQU5UX0lEPSR7QVpVUkVfVEVOQU5UX0lEfSAtLWJ1aWxkLWFyZyBBWlVSRV9DTElFTlRfU0VDUkVUPSR7QVpVUkVfQ0xJRU5UX1NFQ1JFVH0gLi4vLi4vLi4vcGNfZG9uYXRpb24gJiYgXFxcbiAgICAgICAgICAgIGRvY2tlciBwdXNoICR7c2VydmVyZW50cnl9LyR7aW1nbmFtZX0tJGJyYW5jaDokaGFzaGBcbiAgICAgICAgKTtcbiAgICB9XG59XG4iXX0=