"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CognitiveServiceConstruct = void 0;
const constructs_1 = require("constructs");
const provider_azurerm_1 = require("@cdktf/provider-azurerm");
class CognitiveServiceConstruct extends constructs_1.Construct {
    constructor(scope, name, props) {
        super(scope, name);
        const { resourceGroup } = props;
        const cognitiveAccountComputerVision = new provider_azurerm_1.CognitiveAccount(this, "Computer Vision Cognitive Account", {
            name: process.env.STORAGE_ACCOUNT_NAME + process.env.ENV + "ComputerVision",
            resourceGroupName: resourceGroup.name,
            location: resourceGroup.location,
            kind: "ComputerVision", skuName: process.env.COGNITIVE_ACCOUNT_SKU_NAME_COMPUTER_VISION
        });
        this.cognitiveAccountComputerVisionKey = cognitiveAccountComputerVision.primaryAccessKey;
        this.cognitiveAccountComputerVisionEndpoint = cognitiveAccountComputerVision.endpoint;
        const cognitiveAccountContentModerator = new provider_azurerm_1.CognitiveAccount(this, "Content Moderator Cognitive Account", {
            name: process.env.STORAGE_ACCOUNT_NAME + process.env.ENV + "ContentModerator",
            resourceGroupName: resourceGroup.name,
            location: resourceGroup.location,
            kind: "ContentModerator", skuName: process.env.COGNITIVE_ACCOUNT_SKU_NAME
        });
        this.cognitiveAccountContentModeratorKey = cognitiveAccountContentModerator.primaryAccessKey;
        this.cognitiveAccountContentModeratorEndpoint = cognitiveAccountContentModerator.endpoint;
        const cognitiveAccountTextAnalytics = new provider_azurerm_1.CognitiveAccount(this, "Text Analytics Cognitive Account", {
            name: process.env.STORAGE_ACCOUNT_NAME + process.env.ENV + "TextAnalytics",
            resourceGroupName: resourceGroup.name,
            location: resourceGroup.location,
            kind: "TextAnalytics", skuName: process.env.COGNITIVE_ACCOUNT_SKU_NAME_TEXTANALYTICS
        });
        this.cognitiveAccountTextAnalyticsKey = cognitiveAccountTextAnalytics.primaryAccessKey;
        this.cognitiveAccountTextAnalyticsEndpoint = cognitiveAccountTextAnalytics.endpoint;
        const cognitiveAccountTextTranslation = new provider_azurerm_1.CognitiveAccount(this, "Text Translation Cognitive Account", {
            name: process.env.STORAGE_ACCOUNT_NAME + process.env.ENV + "TextTranslation",
            resourceGroupName: resourceGroup.name,
            location: resourceGroup.location,
            kind: "TextTranslation", skuName: process.env.COGNITIVE_ACCOUNT_SKU_NAME_TEXTTRANSLATION
        });
        this.cognitiveAccountTextTranslationKey = cognitiveAccountTextTranslation.primaryAccessKey;
        this.cognitiveAccountTextTranslationEndpoint = cognitiveAccountTextTranslation.endpoint;
        const cognitiveAccountFace = new provider_azurerm_1.CognitiveAccount(this, "Face Cognitive Account", {
            name: process.env.STORAGE_ACCOUNT_NAME + process.env.ENV + "Face",
            resourceGroupName: resourceGroup.name,
            location: resourceGroup.location,
            kind: "Face", skuName: process.env.COGNITIVE_ACCOUNT_SKU_NAME
        });
        this.cognitiveAccountFaceKey = cognitiveAccountFace.primaryAccessKey;
        this.cognitiveAccountFaceEndpoint = cognitiveAccountFace.endpoint;
        const cognitiveAccountFormRecognizer = new provider_azurerm_1.CognitiveAccount(this, "FormRecognizer Cognitive Account", {
            name: process.env.STORAGE_ACCOUNT_NAME + process.env.ENV + "FormRecognizer",
            resourceGroupName: resourceGroup.name,
            location: resourceGroup.location,
            kind: "FormRecognizer", skuName: process.env.COGNITIVE_ACCOUNT_SKU_NAME
        });
        this.cognitiveAccountFormRecognizerKey = cognitiveAccountFormRecognizer.primaryAccessKey;
        this.cognitiveAccountFormRecognizerEndpoint = cognitiveAccountFormRecognizer.endpoint;
    }
}
exports.CognitiveServiceConstruct = CognitiveServiceConstruct;
//# sourceMappingURL=data:application/json;base64,